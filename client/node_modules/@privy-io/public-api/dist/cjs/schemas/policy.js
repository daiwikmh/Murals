"use strict";var e=require("zod"),t=require("@privy-io/api-base"),r=require("./wallet-api/wallets.js");require("./api.js"),require("./core.js"),require("bs58"),require("libphonenumber-js/max"),require("viem"),require("./wallet-api/export.js");const i=e.z.enum(["ALLOW","DENY"]);let a=e.z.union([e.z.string(),e.z.number(),e.z.boolean(),e.z.null()]),n=e.z.lazy((()=>e.z.union([a,e.z.array(n),e.z.record(n)])));const o=e.z.union([e.z.literal("eq"),e.z.literal("gt"),e.z.literal("gte"),e.z.literal("lt"),e.z.literal("lte"),e.z.literal("in")]),s=e.z.object({operator:o,value:e.z.union([e.z.string(),e.z.array(e.z.string())])}),l=e.z.object({field_source:e.z.literal("ethereum_transaction"),field:e.z.union([e.z.literal("to"),e.z.literal("value")])}).strict().merge(s),c=e.z.object({field_source:e.z.literal("ethereum_calldata"),field:e.z.string(),abi:n}).strict().merge(s),u=e.z.object({field_source:e.z.literal("ethereum_typed_data_domain"),field:e.z.union([e.z.literal("chainId"),e.z.literal("verifyingContract"),e.z.literal("chain_id"),e.z.literal("verifying_contract")])}).strict().merge(s),d=e.z.object({field_source:e.z.literal("ethereum_typed_data_message"),field:e.z.string(),typed_data:e.z.object({types:r.TypedDataTypesInputParams,primary_type:e.z.string()})}).strict().merge(s),m=e.z.discriminatedUnion("field_source",[l,c,u,d]),z=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.z.array(m),action:i}).strict();let p=e.z.union([e.z.literal("eth_sendTransaction"),e.z.literal("eth_signTransaction"),e.z.literal("eth_signTypedData_v4"),e.z.literal("exportPrivateKey"),e.z.literal("*")]),h=e.z.object({method:p,rules:e.z.array(z)}).strict().transform((e=>{let t=[];for(let r of e.rules){let i=y.parse({name:r.name,method:e.method,conditions:r.conditions,action:r.action});t.push(i)}return t}));const y=e.z.object({name:e.z.string().max(50,"Rule name must be fewer than 50 characters"),method:p,conditions:e.z.array(m),action:i}).strict();let _=e.z.union([e.z.literal("ethereum"),e.z.literal("solana")]),b=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:_,method_rules:e.z.array(h),default_action:i,...r.OwnerInputFields}).strict(),f=e.z.object({version:e.z.literal("1.0"),name:e.z.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:_,rules:e.z.array(y),...r.OwnerInputFields}).strict();const g=e.z.union([b,f]).transform((e=>{if(!("method_rules"in e))return e;{let t={version:e.version,name:e.name,chain_type:e.chain_type,rules:e.method_rules.flat(),owner:e.owner,owner_id:e.owner_id};return"ALLOW"===e.default_action&&t.rules.push(y.parse({name:"Default Action",method:"*",conditions:[],action:i.enum.ALLOW})),f.parse(t)}})).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).refine((e=>"solana"!==e.chain_type||e.rules.every((e=>"exportPrivateKey"===e.method||"*"===e.method))),{message:'Solana policies only support "exportPrivateKey" and "*" methods'}),v=f.omit({owner:!0,owner_id:!0}).extend({id:e.z.string(),created_at:e.z.number(),owner_id:r.KeyQuorumId.nullable()}),x=e.z.object({policy_id:e.z.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)}));let w=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.z.array(h).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})})),j=e.z.object({name:e.z.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),rules:e.z.array(y).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})}));const P=e.z.union([w,j]).transform((e=>"method_rules"in e?j.parse({name:e.name,rules:e.method_rules?.flat()??[]}):j.parse(e)));exports.BaseEthereumCondition=s,exports.Condition=m,exports.ConditionOperator=o,exports.EthereumCalldataCondition=c,exports.EthereumTransactionCondition=l,exports.EthereumTypedDataDomainCondition=u,exports.EthereumTypedDataMessageCondition=d,exports.LegacyRule=z,exports.PolicyAction=i,exports.PolicyIdFromPath=x,exports.PolicyResponse=v,exports.PolicyWithoutValidation=g,exports.Rule=y,exports.UpdatePolicyInput=P;
