"use strict";var e=require("zod"),t=require("@privy-io/api-base"),a=require("../api.js"),i=require("../core.js"),o=require("./export.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const n=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let r=e.z.object({address:i.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional()}),s=e.z.object({address:i.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional()});const l=e.z.enum(["root","manager","delegated-actions"]).nullable(),p=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")})}).merge(r),d=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:n,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")})}).merge(r),z=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")})}).merge(r),c=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),h=e.z.custom((e=>"string"==typeof e&&e.startsWith("0x")));let g=e.z.number().int().nonnegative().safe();const u=e.z.union([c,g],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),m=e.z.object({from:i.WalletAddress.optional(),to:i.WalletAddress.optional(),chain_id:u.optional(),nonce:u.optional(),data:c.optional(),value:u.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:u.optional(),gas_price:u.optional(),max_fee_per_gas:u.optional(),max_priority_fee_per_gas:u.optional()}),_=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:m})}).merge(s),b=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:n,params:e.z.object({transaction:m})}).merge(s),y=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}),x=e.z.object({method:e.z.literal("personal_sign"),params:y}).merge(s),j=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:h})}).merge(s),A=e.z.record(e.z.string(),e.z.any()),I=e.z.object({name:e.z.string(),version:e.z.string(),chainId:e.z.number(),verifyingContract:e.z.string()}).merge(e.z.object({}).catchall(e.z.any())),v=e.z.union([I,A]),R=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),W=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:v,types:R,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()})})}).merge(s),S=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:o.PrivateKeyExportInput}),T=e.z.discriminatedUnion("method",[_,b,x,W,j]),f=e.z.discriminatedUnion("method",[p,d,z]),P=e.z.union([T,f,S]),k=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),D=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:n}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),E=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),w=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),K=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:n}).optional(),error:e.z.object({code:e.z.string(),message:e.z.string()}).optional()}),q=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),C=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:c,encoding:e.z.literal("hex")})}),O=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),U=e.z.object({method:e.z.literal("exportPrivateKey"),data:o.PrivateKeyExportInput}),M=e.z.discriminatedUnion("method",[k,D,E,w,K,q,C,O,U]),L=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:l.optional()});let F=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]);const H=e.z.object({id:e.z.string(),address:e.z.string(),created_at:e.z.number(),chain_type:F,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2()})),owner_id:e.z.string().cuid2().nullable()}),N=e.z.string().cuid2(),Q=e.z.string(),V=e.z.object({public_key:Q}),B={owner:V.nullable().optional(),owner_id:N.nullable().optional()},Z=e.z.array(e.z.object({signer_id:N}).strict()),$=e.z.object({chain_type:F,policy_ids:e.z.array(e.z.string()).max(1).optional(),authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:Z.optional(),...B}),G=$.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,a=void 0!==e.additional_signers;return!t||!a}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),J=e.z.object({id:e.z.string(),chain_type:F,address:e.z.string(),authorization_threshold:e.z.number().optional()}),X=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),Y=e.z.object({id:e.z.string()}),ee=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:l,created_at:e.z.number()}),te=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),ae=a.Pagination.extend({chain_type:F.optional()}).strict(),ie=e.z.object({policy_ids:e.z.array(e.z.string()).max(1,"Only one policy ID can be set").optional(),authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:Z.optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))}));exports.AdditionalSignerInput=Z,exports.AuthorizationKeyDashboardResponse=ee,exports.AuthorizationKeyResponse=te,exports.AuthorizationKeyRole=l,exports.BaseWalletApiCreateInput=$,exports.CAIP2=n,exports.CurrentTypedDataDomainInputParams=I,exports.Hash=h,exports.Hex=c,exports.KeyQuorumId=N,exports.LegacyTypedDataDomainInputParams=A,exports.OwnerInput=V,exports.OwnerInputFields=B,exports.P256PublicKey=Q,exports.Quantity=u,exports.TypedDataDomainInputParams=v,exports.TypedDataTypesInputParams=R,exports.UnsignedEthereumTransaction=m,exports.WalletApiCreateInput=G,exports.WalletApiCreateResponse=J,exports.WalletApiEthereumPersonalSignRpcInput=x,exports.WalletApiEthereumPersonalSignRpcInputParams=y,exports.WalletApiEthereumPersonalSignRpcResponse=q,exports.WalletApiEthereumRpcInput=T,exports.WalletApiEthereumSecp256k1SignRpcInput=j,exports.WalletApiEthereumSecp256k1SignRpcResponse=C,exports.WalletApiEthereumSendTransactionRpcInput=b,exports.WalletApiEthereumSendTransactionRpcResponse=K,exports.WalletApiEthereumSignTransactionRpcInput=_,exports.WalletApiEthereumSignTransactionRpcResponse=w,exports.WalletApiEthereumSignTypedDataRpcInput=W,exports.WalletApiEthereumSignTypedDataRpcResponse=O,exports.WalletApiExportPrivateKeyRpcInput=S,exports.WalletApiExportPrivateKeyRpcResponse=U,exports.WalletApiRegisterAuthorizationKeyInput=L,exports.WalletApiRevokeAuthorizationKeyInput=Y,exports.WalletApiRpcInput=P,exports.WalletApiRpcResponse=M,exports.WalletApiSolanaRpcInput=f,exports.WalletApiSolanaSignAndSendTransactionRpcInput=d,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=D,exports.WalletApiSolanaSignMessageRpcInput=z,exports.WalletApiSolanaSignMessageRpcResponse=E,exports.WalletApiSolanaSignTransactionRpcInput=p,exports.WalletApiSolanaSignTransactionRpcResponse=k,exports.WalletIdFromPath=X,exports.WalletResponse=H,exports.WalletUpdateInput=ie,exports.WalletsSearchInput=ae;
