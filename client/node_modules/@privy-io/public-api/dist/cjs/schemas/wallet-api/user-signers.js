"use strict";var e=require("zod"),r=require("../core.js"),t=require("./wallets.js");require("bs58"),require("libphonenumber-js/max"),require("viem"),require("@privy-io/api-base"),require("../api.js"),require("./export.js");const i=e.z.object({type:e.z.literal("email"),address:r.Email}).strict();let s=t.BaseWalletApiCreateInput.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const a=e.z.object({wallets:e.z.array(s),primary_signer:e.z.object({subject_id:e.z.string()}).strict(),recovery_user:e.z.object({linked_accounts:e.z.array(i).min(1).max(1)}).strict()}).strict(),o=e.z.object({wallets:e.z.array(t.WalletResponse),recovery_user_id:e.z.string()}).strict(),n=e.z.object({user_jwt:e.z.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"}),encryption_type:e.z.literal("HPKE"),recipient_public_key:e.z.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict(),c=e.z.object({encrypted_authorization_key:e.z.object({encryption_type:e.z.literal("HPKE"),encapsulated_key:e.z.string(),ciphertext:e.z.string()}),expires_at:e.z.number(),wallets:e.z.array(t.WalletResponse)}).strict();exports.ImportEmailAccountInput=i,exports.UserSignersAuthenticateInput=n,exports.UserSignersAuthenticateResponse=c,exports.WalletsWithRecoveryRequest=a,exports.WalletsWithRecoveryResponse=o;
