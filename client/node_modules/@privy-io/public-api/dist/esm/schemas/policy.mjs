import{z as e}from"zod";import{InvalidInputError as t,PrivyErrorCode as r}from"@privy-io/api-base";import{TypedDataTypesInputParams as a,OwnerInputFields as i,KeyQuorumId as n}from"./wallet-api/wallets.mjs";import"./api.mjs";import"./core.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"./wallet-api/export.mjs";const o=e.enum(["ALLOW","DENY"]);let l=e.union([e.string(),e.number(),e.boolean(),e.null()]),s=e.lazy((()=>e.union([l,e.array(s),e.record(s)])));const m=e.union([e.literal("eq"),e.literal("gt"),e.literal("gte"),e.literal("lt"),e.literal("lte"),e.literal("in")]),c=e.object({operator:m,value:e.union([e.string(),e.array(e.string())])}),d=e.object({field_source:e.literal("ethereum_transaction"),field:e.union([e.literal("to"),e.literal("value")])}).strict().merge(c),u=e.object({field_source:e.literal("ethereum_calldata"),field:e.string(),abi:s}).strict().merge(c),p=e.object({field_source:e.literal("ethereum_typed_data_domain"),field:e.union([e.literal("chainId"),e.literal("verifyingContract"),e.literal("chain_id"),e.literal("verifying_contract")])}).strict().merge(c),h=e.object({field_source:e.literal("ethereum_typed_data_message"),field:e.string(),typed_data:e.object({types:a,primary_type:e.string()})}).strict().merge(c),_=e.discriminatedUnion("field_source",[d,u,p,h]),y=e.object({name:e.string().max(50,"Rule name must be fewer than 50 characters"),conditions:e.array(_),action:o}).strict();let f=e.union([e.literal("eth_sendTransaction"),e.literal("eth_signTransaction"),e.literal("eth_signTypedData_v4"),e.literal("exportPrivateKey"),e.literal("*")]),b=e.object({method:f,rules:e.array(y)}).strict().transform((e=>{let t=[];for(let r of e.rules){let a=g.parse({name:r.name,method:e.method,conditions:r.conditions,action:r.action});t.push(a)}return t}));const g=e.object({name:e.string().max(50,"Rule name must be fewer than 50 characters"),method:f,conditions:e.array(_),action:o}).strict();let v=e.union([e.literal("ethereum"),e.literal("solana")]),w=e.object({version:e.literal("1.0"),name:e.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:v,method_rules:e.array(b),default_action:o,...i}).strict(),j=e.object({version:e.literal("1.0"),name:e.string().max(50,"Policy name must be fewer than 50 characters"),chain_type:v,rules:e.array(g),...i}).strict();const x=e.union([w,j]).transform((e=>{if(!("method_rules"in e))return e;{let t={version:e.version,name:e.name,chain_type:e.chain_type,rules:e.method_rules.flat(),owner:e.owner,owner_id:e.owner_id};return"ALLOW"===e.default_action&&t.rules.push(g.parse({name:"Default Action",method:"*",conditions:[],action:o.enum.ALLOW})),j.parse(t)}})).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).refine((e=>"solana"!==e.chain_type||e.rules.every((e=>"exportPrivateKey"===e.method||"*"===e.method))),{message:'Solana policies only support "exportPrivateKey" and "*" methods'}),A=j.omit({owner:!0,owner_id:!0}).extend({id:e.string(),created_at:e.number(),owner_id:n.nullable()}),P=e.object({policy_id:e.string({required_error:"Policy ID must be provided",invalid_type_error:"Policy ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t(e.message,r.INVALID_DATA)}));let D=e.object({name:e.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),method_rules:e.array(b).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})})),I=e.object({name:e.string().trim().min(1,"Name is required").max(50,"Policy name must be fewer than 50 characters").optional(),rules:e.array(g).optional()}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>null==e))&&t.addIssue({code:"custom",message:"At least one field must be provided"})}));const L=e.union([D,I]).transform((e=>"method_rules"in e?I.parse({name:e.name,rules:e.method_rules?.flat()??[]}):I.parse(e)));export{c as BaseEthereumCondition,_ as Condition,m as ConditionOperator,u as EthereumCalldataCondition,d as EthereumTransactionCondition,p as EthereumTypedDataDomainCondition,h as EthereumTypedDataMessageCondition,y as LegacyRule,o as PolicyAction,P as PolicyIdFromPath,A as PolicyResponse,x as PolicyWithoutValidation,g as Rule,L as UpdatePolicyInput};
