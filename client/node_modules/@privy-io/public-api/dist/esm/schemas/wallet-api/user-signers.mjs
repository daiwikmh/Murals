import{z as r}from"zod";import{Email as e}from"../core.mjs";import{BaseWalletApiCreateInput as t,WalletResponse as i}from"./wallets.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"@privy-io/api-base";import"../api.mjs";import"./export.mjs";const o=r.object({type:r.literal("email"),address:e}).strict();let s=t.omit({owner:!0,owner_id:!0,additional_signers:!0,authorization_key_ids:!0,authorization_threshold:!0});const a=r.object({wallets:r.array(s),primary_signer:r.object({subject_id:r.string()}).strict(),recovery_user:r.object({linked_accounts:r.array(o).min(1).max(1)}).strict()}).strict(),n=r.object({wallets:r.array(i),recovery_user_id:r.string()}).strict(),p=r.object({user_jwt:r.string({required_error:"User JWT must be provided",invalid_type_error:"User JWT must be a string"}),encryption_type:r.literal("HPKE"),recipient_public_key:r.string({required_error:"Recipient public key must be provided",invalid_type_error:"Recipient public key must be a string"})}).strict(),c=r.object({encrypted_authorization_key:r.object({encryption_type:r.literal("HPKE"),encapsulated_key:r.string(),ciphertext:r.string()}),expires_at:r.number(),wallets:r.array(i)}).strict();export{o as ImportEmailAccountInput,p as UserSignersAuthenticateInput,c as UserSignersAuthenticateResponse,a as WalletsWithRecoveryRequest,n as WalletsWithRecoveryResponse};
