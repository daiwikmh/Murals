export class OCAuthCore {
    constructor(loginEndpoint: any, redirectUri: any, transactionManager: any, tokenManager: any, referralCode: any, logoutEndPoint: any);
    tokenManager: any;
    authInfoManager: AuthInfoManager;
    transactionManager: any;
    redirectUri: any;
    loginEndPoint: any;
    logoutEndPoint: any;
    referralCode: any;
    clearStorage(): void;
    logout(logoutReturnTo: any): Promise<void>;
    signInWithRedirect(params: any): Promise<void>;
    handleLoginRedirect(): Promise<any>;
    isAuthenticated(): boolean;
    syncAuthInfo(): void;
    getAuthState(): any;
    getStateParameter(): any;
    getIdToken(): any;
    getAccessToken(): any;
    getParsedIdToken(): any;
    getParsedAccessToken(): any;
    get OCId(): any;
    get ethAddress(): any;
}
export class OCAuthLive extends OCAuthCore {
    constructor(opts?: {});
}
export class OCAuthSandbox extends OCAuthCore {
    constructor(opts?: {});
}
import AuthInfoManager from './lib/AuthInfoManager';
