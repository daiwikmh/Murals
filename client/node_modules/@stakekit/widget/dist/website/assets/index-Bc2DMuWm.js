import{C as E,b as l,E as v,L as N,R as w,S as f,W as S,c as y,g as z,a as C,d as R,i as j}from"./wallet-manager-DbxT4V6a.js";import"./events-I07Z7rae.js";import"./index-eFtiB1vj.js";import"./readable-browser-DCJuMLFl.js";import"./inherits_browser-DWqDQfWl.js";import"./index.es-CUz91iVt.js";import"./hmac-drbg-B8HVyDJH.js";import"./index-CJIgcVBE.js";import"./chain-registry-DY5FS6Ih.js";const t=[{name:"icns",contract:"osmo1xk0s8xgktn9x5vwcgtjdxqzadg88fgn33p8u9cnpdxwemvxscvast52cdd",chainName:"osmosis",getQueryMsg:r=>({icns_names:{address:r}}),slip173:"osmo"},{name:"stargaze",contract:"stars1fx74nkqkw2748av8j7ew7r3xt9cgjqduwn8m0ur5lhe49uhlsasszc5fhr",chainName:"stargaze",getQueryMsg:r=>({name:{address:r}}),slip173:"stars"}],p=r=>{const e=t.find(s=>s.chainName===r);if(!e)throw new Error("No such name service registered with chain "+r);return e},u=r=>t.find(e=>e.name===r);export{E as ClientNotExistError,l as ConnectError,v as ExpiredError,N as Logger,w as RejectedError,f as Session,S as WalletNotProvidedError,y as convertChain,z as getFastestEndpoint,C as getIsLazy,p as getNameServiceRegistryFromChainName,u as getNameServiceRegistryFromName,R as getWalletStatusFromState,j as isValidEndpoint};
//# sourceMappingURL=index-Bc2DMuWm.js.map
