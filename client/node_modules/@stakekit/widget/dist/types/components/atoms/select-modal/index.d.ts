import type { PropsWithChildren, ReactNode } from "react";
import type { ItemContainerVariants } from "../list/styles.css";
type SelectModalWithoutStateProps = PropsWithChildren<{
    title?: string;
    inputPlaceholder?: string;
    trigger?: ReactNode;
    onClose?: () => void;
    onOpen?: () => void;
    searchValue?: string;
    isLoading?: boolean;
    errorMessage?: string;
    disableClose?: boolean;
    hideTopBar?: boolean;
} & ({
    onSearch: (value: string) => void;
    searchValue: string;
} | {
    onSearch?: never;
    searchValue?: never;
})>;
type SelectModalContextType = {
    isOpen: boolean;
    setOpen: (val: boolean) => void;
};
export type SelectModalProps = SelectModalWithoutStateProps & {
    state?: SelectModalContextType;
};
export declare const SelectModal: ({ state, ...props }: SelectModalProps) => import("react/jsx-runtime").JSX.Element;
export declare const SelectModalItemContainer: ({ children }: PropsWithChildren) => import("react/jsx-runtime").JSX.Element;
export declare const SelectModalItem: ({ children, onItemClick, testId, variant, }: PropsWithChildren<{
    onItemClick?: (args: {
        closeModal: () => void;
    }) => void;
    testId?: string;
    variant?: ItemContainerVariants;
}>) => import("react/jsx-runtime").JSX.Element;
export {};
