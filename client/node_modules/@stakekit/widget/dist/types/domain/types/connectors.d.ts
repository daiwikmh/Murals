import type { Observable } from "rxjs";
import type { Chain } from "viem";
import type { Connector } from "wagmi";
export type ConnectorWithFilteredChains = {
    $filteredChains: Observable<Chain[]>;
};
export declare const isConnectorWithFilteredChains: (connector: Connector) => connector is Connector & ConnectorWithFilteredChains;
export declare const shouldShowDisconnect: (connector: Connector) => boolean;
export declare const shouldMultiSend: (connector: Connector) => connector is {
    [x: string]: unknown;
    readonly icon?: string | undefined;
    readonly id: string;
    readonly name: string;
    readonly rdns?: string | undefined;
    readonly supportsSimulation?: boolean | undefined;
    readonly type: string;
    setup?: (() => Promise<void>) | undefined;
    connect: (parameters?: {
        chainId?: number | undefined;
        isReconnecting?: boolean | undefined;
    } | undefined) => Promise<{
        accounts: readonly import("viem").Address[];
        chainId: number;
    }>;
    disconnect: () => Promise<void>;
    getAccounts: () => Promise<readonly import("viem").Address[]>;
    getChainId: () => Promise<number>;
    getProvider: (parameters?: {
        chainId?: number | undefined;
    } | undefined) => Promise<unknown>;
    getClient?: ((parameters?: {
        chainId?: number | undefined;
    } | undefined) => Promise<import("viem").Client>) | undefined;
    isAuthorized: () => Promise<boolean>;
    switchChain?: ((parameters: import("@wagmi/core/internal").Compute<{
        addEthereumChainParameter?: import("@wagmi/core/internal").ExactPartial<import("@wagmi/core/internal").Omit<import("viem").AddEthereumChainParameter, "chainId">> | undefined;
        chainId: number;
    }>) => Promise<Chain>) | undefined;
    onAccountsChanged: (accounts: string[]) => void;
    onChainChanged: (chainId: string) => void;
    onConnect?: ((connectInfo: import("viem").ProviderConnectInfo) => void) | undefined;
    onDisconnect: (error?: Error | undefined) => void;
    onMessage?: ((message: import("viem").ProviderMessage) => void) | undefined;
} & {
    emitter: import("@wagmi/core/internal").Emitter<import("wagmi").ConnectorEventMap>;
    uid: string;
} & ConnectorWithFilteredChains & {
    getTxStatus(txHash: string): import("purify-ts").EitherAsync<Error, import("@safe-global/safe-apps-sdk").GatewayTransactionDetails>;
    txStatus: typeof import("@safe-global/safe-gateway-typescript-sdk").TransactionStatus;
    sendTransactions(args_0: import("@safe-global/safe-apps-sdk").SendTransactionsParams): import("purify-ts").EitherAsync<Error, import("@safe-global/safe-apps-sdk").SendTransactionsResponse>;
};
