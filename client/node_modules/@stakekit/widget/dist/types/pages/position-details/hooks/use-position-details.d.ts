import type { TokenDto } from "@stakekit/api-hooks";
import BigNumber from "bignumber.js";
import { Maybe } from "purify-ts";
export declare const usePositionDetails: () => {
    integrationData: Maybe<import("@stakekit/api-hooks").YieldDto>;
    reducedStakedOrLiquidBalance: Maybe<{
        amount: BigNumber;
        token: TokenDto;
        pricePerShare: string;
    }>;
    positionBalancesByType: Maybe<import("../../../domain/types/positions").PositionBalancesByType>;
    canUnstake: boolean;
    unstakeAmount: BigNumber;
    onUnstakeAmountChange: (value: BigNumber) => void;
    unstakeFormattedAmount: string;
    onMaxClick: () => void;
    canChangeUnstakeAmount: Maybe<boolean>;
    onUnstakeClick: import("@tanstack/react-query").UseMutateFunction<null, Error, void, unknown>;
    unstakeDisabled: boolean;
    isLoading: boolean;
    onPendingActionClick: ({ yieldBalance, pendingActionDto, }: {
        pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
        yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto;
    }) => void;
    providersDetails: Maybe<{
        logo: string | undefined;
        name: string;
        rewardRateFormatted: string;
        rewardRate: number | undefined;
        rewardType: import("@stakekit/api-hooks").RewardTypes;
        address?: string;
        stakedBalance?: import("@stakekit/api-hooks").ValidatorDto["stakedBalance"];
        votingPower?: import("@stakekit/api-hooks").ValidatorDto["votingPower"];
        commission?: import("@stakekit/api-hooks").ValidatorDto["commission"];
        website?: import("@stakekit/api-hooks").ValidatorDto["website"];
        status?: import("@stakekit/api-hooks").ValidatorDto["status"];
        preferred?: import("@stakekit/api-hooks").ValidatorDto["preferred"];
    }[]>;
    pendingActions: import("purify-ts/Maybe").Maybe<{
        amount: BigNumber | null;
        formattedAmount: string;
        pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
        yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto & {
            tokenPriceInUsd: BigNumber;
        };
    }[]>;
    liquidTokensToNativeConversion: import("purify-ts/Maybe").Maybe<Map<string, string>>;
    validatorAddressesHandling: {
        modalState: {
            isOpen: boolean;
            setOpen: (val: boolean) => void;
        };
        closeModal: () => void;
        openModal: (args: {
            yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto;
            pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
        }) => void;
        onItemClick: (validator: import("@stakekit/api-hooks").ValidatorDto["address"]) => void;
        submitDisabled: boolean;
        selectedValidators: Set<import("@stakekit/api-hooks").ValidatorDto["address"]>;
        multiSelect: boolean;
        showValidatorsModal: true;
        yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto;
        pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
    } | {
        modalState: {
            isOpen: boolean;
            setOpen: (val: boolean) => void;
        };
        closeModal: () => void;
        openModal: (args: {
            yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto;
            pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
        }) => void;
        onItemClick: (validator: import("@stakekit/api-hooks").ValidatorDto["address"]) => void;
        submitDisabled: boolean;
        selectedValidators: Set<import("@stakekit/api-hooks").ValidatorDto["address"]>;
        multiSelect: boolean;
        showValidatorsModal: false;
        yieldBalance: null;
        pendingActionDto: null;
    };
    onValidatorsSubmit: (selectedValidators: string[]) => import("purify-ts").Either<Error, {
        yieldDto: import("@stakekit/api-hooks").YieldDto;
        selectedValidators: string[];
        pendingActionDto: import("@stakekit/api-hooks").PendingActionDto;
        yieldBalance: import("@stakekit/api-hooks").YieldBalanceDto;
    }>;
    onPendingActionAmountChange: (data: import("../state/types").PendingActionAmountChange["data"]) => void;
    unstakeToken: Maybe<TokenDto>;
    positionLabel: import("purify-ts/Maybe").Maybe<import("@stakekit/api-hooks").YieldBalanceLabelDto>;
    unstakeAmountError: boolean;
    unstakeMaxAmount: import("purify-ts/Maybe").Maybe<number>;
    unstakeMinAmount: import("purify-ts/Maybe").Maybe<number>;
    unstakeIsGreaterOrLessIntegrationLimitError: boolean;
};
