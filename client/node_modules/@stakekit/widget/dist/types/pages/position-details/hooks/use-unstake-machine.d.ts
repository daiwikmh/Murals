import type { SKWallet } from "@sk-widget/domain/types";
import { useExitStakeStore } from "@sk-widget/providers/exit-stake-store";
import type { GetMaybeJust } from "@sk-widget/types";
import type { TransactionVerificationMessageDto } from "@stakekit/api-hooks";
import type { SnapshotFromStore } from "@xstate/store";
import { Maybe } from "purify-ts";
export declare const useUnstakeMachine: ({ onDone }: {
    onDone: () => void;
}) => [import("xstate").MachineSnapshot<{
    error: Maybe<Error>;
    transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
    signedMessage: Maybe<string>;
    data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>;
}, {
    type: "UNSTAKE";
} | {
    type: "__GET_VERIFICATION_MESSAGE__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__SUBMIT__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__RESET__";
} | {
    type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
    val: TransactionVerificationMessageDto;
} | {
    type: "__GET_VERIFICATION_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "CONTINUE_MESSAGE_SIGN";
} | {
    type: "CANCEL_MESSAGE_SIGN";
} | {
    type: "__SIGN_MESSAGE_SUCCESS__";
    val: string;
} | {
    type: "__SIGN_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "__SUBMIT_SUCCESS__";
} | {
    type: "__SUBMIT_ERROR__";
}, {}, "done" | "initial" | "check" | "showPopup" | {
    submit: "error" | "loading";
} | {
    signMessage: "error" | "loading";
} | {
    getVerificationMessage: "error" | "loading";
}, string, import("xstate").NonReducibleUnknown, import("xstate").MetaObject, {
    readonly context: {
        readonly error: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly transactionVerificationMessageDto: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly signedMessage: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly data: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
    };
    readonly on: {
        readonly UNSTAKE: {
            readonly target: ".check";
            readonly reenter: true;
        };
    };
    readonly initial: "initial";
    readonly states: {
        readonly initial: {};
        readonly check: {
            readonly on: {
                readonly __GET_VERIFICATION_MESSAGE__: {
                    readonly target: "getVerificationMessage";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __SUBMIT__: {
                    readonly target: "submit";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __RESET__: "initial";
            };
            readonly entry: ({ self }: import("xstate").ActionArgs<{
                error: Maybe<Error>;
                transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                signedMessage: Maybe<string>;
                data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>;
            }, {
                type: "UNSTAKE";
            } | {
                type: "__GET_VERIFICATION_MESSAGE__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__SUBMIT__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__RESET__";
            } | {
                type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                val: TransactionVerificationMessageDto;
            } | {
                type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "CONTINUE_MESSAGE_SIGN";
            } | {
                type: "CANCEL_MESSAGE_SIGN";
            } | {
                type: "__SIGN_MESSAGE_SUCCESS__";
                val: string;
            } | {
                type: "__SIGN_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "__SUBMIT_SUCCESS__";
            } | {
                type: "__SUBMIT_ERROR__";
            }, {
                type: "UNSTAKE";
            } | {
                type: "__GET_VERIFICATION_MESSAGE__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__SUBMIT__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__RESET__";
            } | {
                type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                val: TransactionVerificationMessageDto;
            } | {
                type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "CONTINUE_MESSAGE_SIGN";
            } | {
                type: "CANCEL_MESSAGE_SIGN";
            } | {
                type: "__SIGN_MESSAGE_SUCCESS__";
                val: string;
            } | {
                type: "__SIGN_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "__SUBMIT_SUCCESS__";
            } | {
                type: "__SUBMIT_ERROR__";
            }>) => void;
        };
        readonly getVerificationMessage: {
            readonly on: {
                readonly __GET_VERIFICATION_MESSAGE_SUCCESS__: {
                    readonly target: "showPopup";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __GET_VERIFICATION_MESSAGE_ERROR__: {
                    readonly target: ".error";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly showPopup: {
            readonly on: {
                readonly CONTINUE_MESSAGE_SIGN: "signMessage";
                readonly CANCEL_MESSAGE_SIGN: "initial";
            };
        };
        readonly signMessage: {
            readonly on: {
                readonly __SIGN_MESSAGE_SUCCESS__: {
                    readonly target: "submit";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __SIGN_MESSAGE_ERROR__: {
                    readonly target: ".error";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly submit: {
            readonly on: {
                readonly __SUBMIT_SUCCESS__: "done";
                readonly __SUBMIT_ERROR__: ".error";
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context: { data, signedMessage, transactionVerificationMessageDto, }, }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly done: {
            readonly type: "final";
            readonly entry: () => void;
        };
    };
}>, (event: {
    type: "UNSTAKE";
} | {
    type: "__GET_VERIFICATION_MESSAGE__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__SUBMIT__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__RESET__";
} | {
    type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
    val: TransactionVerificationMessageDto;
} | {
    type: "__GET_VERIFICATION_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "CONTINUE_MESSAGE_SIGN";
} | {
    type: "CANCEL_MESSAGE_SIGN";
} | {
    type: "__SIGN_MESSAGE_SUCCESS__";
    val: string;
} | {
    type: "__SIGN_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "__SUBMIT_SUCCESS__";
} | {
    type: "__SUBMIT_ERROR__";
}) => void, import("xstate").Actor<import("xstate").StateMachine<{
    error: Maybe<Error>;
    transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
    signedMessage: Maybe<string>;
    data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>;
}, {
    type: "UNSTAKE";
} | {
    type: "__GET_VERIFICATION_MESSAGE__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__SUBMIT__";
    val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
        network: NonNullable<SKWallet["network"]>;
        address: NonNullable<SKWallet["address"]>;
        additionalAddresses: SKWallet["additionalAddresses"];
    }>>>;
} | {
    type: "__RESET__";
} | {
    type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
    val: TransactionVerificationMessageDto;
} | {
    type: "__GET_VERIFICATION_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "CONTINUE_MESSAGE_SIGN";
} | {
    type: "CANCEL_MESSAGE_SIGN";
} | {
    type: "__SIGN_MESSAGE_SUCCESS__";
    val: string;
} | {
    type: "__SIGN_MESSAGE_ERROR__";
    val: Error;
} | {
    type: "__SUBMIT_SUCCESS__";
} | {
    type: "__SUBMIT_ERROR__";
}, {}, never, never, never, never, "done" | "initial" | "check" | "showPopup" | {
    submit: "error" | "loading";
} | {
    signMessage: "error" | "loading";
} | {
    getVerificationMessage: "error" | "loading";
}, string, import("xstate").NonReducibleUnknown, import("xstate").NonReducibleUnknown, import("xstate").EventObject, import("xstate").MetaObject, {
    readonly context: {
        readonly error: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly transactionVerificationMessageDto: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly signedMessage: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
        readonly data: {
            isJust(): this is import("purify-ts").AlwaysJust;
            isNothing(): this is any;
            inspect(): string;
            toString(): string;
            toJSON(): never;
            equals<T>(other: import("purify-ts/Maybe").Maybe<T>): boolean;
            map<U>(_: (value: never) => U): import("purify-ts/Maybe").Maybe<U>;
            ap<U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>): import("purify-ts/Maybe").Maybe<U>;
            alt<T>(other: import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            altLazy<T>(other: () => import("purify-ts/Maybe").Maybe<T>): import("purify-ts/Maybe").Maybe<T>;
            chain<U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>): import("purify-ts/Maybe").Maybe<U>;
            chainNullable<U>(_: (value: never) => U | undefined | null | void): import("purify-ts/Maybe").Maybe<U>;
            join<U>(this: import("purify-ts/Maybe").Maybe<import("purify-ts/Maybe").Maybe<U>>): import("purify-ts/Maybe").Maybe<U>;
            reduce<U>(_: (accumulator: U, value: never) => U, initialValue: U): U;
            extend<U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U): import("purify-ts/Maybe").Maybe<U>;
            unsafeCoerce<T>(): T;
            caseOf<U>(patterns: import("purify-ts").MaybePatterns<never, U>): U;
            orDefault<T>(defaultValue: T): T;
            orDefaultLazy<T>(getDefaultValue: () => T): T;
            toList<T>(): T[];
            mapOrDefault<U>(_: (value: never) => U, defaultValue: U): U;
            extract(): never;
            extractNullable(): never;
            toEither<L, T>(left: L): import("purify-ts").Either<L, T>;
            ifJust(_: (value: never) => any): any;
            ifNothing(effect: () => any): any;
            filter(_: (value: never) => boolean): import("purify-ts/Maybe").Maybe<never>;
            'fantasy-land/equals': <T>(other: import("purify-ts/Maybe").Maybe<T>) => boolean;
            'fantasy-land/map': <U>(_: (value: never) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/ap': <U>(_: import("purify-ts/Maybe").Maybe<(value: never) => U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/alt': <T>(other: import("purify-ts/Maybe").Maybe<T>) => import("purify-ts/Maybe").Maybe<T>;
            'fantasy-land/chain': <U>(_: (value: never) => import("purify-ts/Maybe").Maybe<U>) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/reduce': <U>(_: (accumulator: U, value: never) => U, initialValue: U) => U;
            'fantasy-land/extend': <U>(_: (value: import("purify-ts/Maybe").Maybe<never>) => U) => import("purify-ts/Maybe").Maybe<U>;
            'fantasy-land/filter': (_: (value: never) => boolean) => import("purify-ts/Maybe").Maybe<never>;
        };
    };
    readonly on: {
        readonly UNSTAKE: {
            readonly target: ".check";
            readonly reenter: true;
        };
    };
    readonly initial: "initial";
    readonly states: {
        readonly initial: {};
        readonly check: {
            readonly on: {
                readonly __GET_VERIFICATION_MESSAGE__: {
                    readonly target: "getVerificationMessage";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __SUBMIT__: {
                    readonly target: "submit";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __RESET__: "initial";
            };
            readonly entry: ({ self }: import("xstate").ActionArgs<{
                error: Maybe<Error>;
                transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                signedMessage: Maybe<string>;
                data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>;
            }, {
                type: "UNSTAKE";
            } | {
                type: "__GET_VERIFICATION_MESSAGE__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__SUBMIT__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__RESET__";
            } | {
                type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                val: TransactionVerificationMessageDto;
            } | {
                type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "CONTINUE_MESSAGE_SIGN";
            } | {
                type: "CANCEL_MESSAGE_SIGN";
            } | {
                type: "__SIGN_MESSAGE_SUCCESS__";
                val: string;
            } | {
                type: "__SIGN_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "__SUBMIT_SUCCESS__";
            } | {
                type: "__SUBMIT_ERROR__";
            }, {
                type: "UNSTAKE";
            } | {
                type: "__GET_VERIFICATION_MESSAGE__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__SUBMIT__";
                val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                    network: NonNullable<SKWallet["network"]>;
                    address: NonNullable<SKWallet["address"]>;
                    additionalAddresses: SKWallet["additionalAddresses"];
                }>>>;
            } | {
                type: "__RESET__";
            } | {
                type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                val: TransactionVerificationMessageDto;
            } | {
                type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "CONTINUE_MESSAGE_SIGN";
            } | {
                type: "CANCEL_MESSAGE_SIGN";
            } | {
                type: "__SIGN_MESSAGE_SUCCESS__";
                val: string;
            } | {
                type: "__SIGN_MESSAGE_ERROR__";
                val: Error;
            } | {
                type: "__SUBMIT_SUCCESS__";
            } | {
                type: "__SUBMIT_ERROR__";
            }>) => void;
        };
        readonly getVerificationMessage: {
            readonly on: {
                readonly __GET_VERIFICATION_MESSAGE_SUCCESS__: {
                    readonly target: "showPopup";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __GET_VERIFICATION_MESSAGE_ERROR__: {
                    readonly target: ".error";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly showPopup: {
            readonly on: {
                readonly CONTINUE_MESSAGE_SIGN: "signMessage";
                readonly CANCEL_MESSAGE_SIGN: "initial";
            };
        };
        readonly signMessage: {
            readonly on: {
                readonly __SIGN_MESSAGE_SUCCESS__: {
                    readonly target: "submit";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
                readonly __SIGN_MESSAGE_ERROR__: {
                    readonly target: ".error";
                    readonly actions: import("xstate").ActionFunction<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, undefined, never, never, never, never, never>;
                };
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly submit: {
            readonly on: {
                readonly __SUBMIT_SUCCESS__: "done";
                readonly __SUBMIT_ERROR__: ".error";
            };
            readonly initial: "loading";
            readonly states: {
                readonly loading: {
                    readonly entry: ({ self, context: { data, signedMessage, transactionVerificationMessageDto, }, }: import("xstate").ActionArgs<{
                        error: Maybe<Error>;
                        transactionVerificationMessageDto: Maybe<TransactionVerificationMessageDto>;
                        signedMessage: Maybe<string>;
                        data: ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>;
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }, {
                        type: "UNSTAKE";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__SUBMIT__";
                        val: GetMaybeJust<ReturnType<() => Maybe<GetMaybeJust<SnapshotFromStore<ReturnType<typeof useExitStakeStore>>["context"]["data"]> & {
                            network: NonNullable<SKWallet["network"]>;
                            address: NonNullable<SKWallet["address"]>;
                            additionalAddresses: SKWallet["additionalAddresses"];
                        }>>>;
                    } | {
                        type: "__RESET__";
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_SUCCESS__";
                        val: TransactionVerificationMessageDto;
                    } | {
                        type: "__GET_VERIFICATION_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "CONTINUE_MESSAGE_SIGN";
                    } | {
                        type: "CANCEL_MESSAGE_SIGN";
                    } | {
                        type: "__SIGN_MESSAGE_SUCCESS__";
                        val: string;
                    } | {
                        type: "__SIGN_MESSAGE_ERROR__";
                        val: Error;
                    } | {
                        type: "__SUBMIT_SUCCESS__";
                    } | {
                        type: "__SUBMIT_ERROR__";
                    }>) => Promise<void>;
                };
                readonly error: {};
            };
        };
        readonly done: {
            readonly type: "final";
            readonly entry: () => void;
        };
    };
}>>];
