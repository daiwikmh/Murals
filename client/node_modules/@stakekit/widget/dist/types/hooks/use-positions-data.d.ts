import type { PositionsData } from "@sk-widget/domain/types/positions";
export declare const usePositionsData: () => {
    error: import("@stakekit/api-hooks").StakeKitErrorDto;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: import("@stakekit/api-hooks").StakeKitErrorDto | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<PositionsData, import("@stakekit/api-hooks").StakeKitErrorDto>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    queryKey: import("@tanstack/query-core").QueryKey;
    data: PositionsData;
} | {
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: import("@stakekit/api-hooks").StakeKitErrorDto | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<PositionsData, import("@stakekit/api-hooks").StakeKitErrorDto>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    queryKey: import("@tanstack/query-core").QueryKey;
    data: PositionsData;
} | {
    error: import("@stakekit/api-hooks").StakeKitErrorDto;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: import("@stakekit/api-hooks").StakeKitErrorDto | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<PositionsData, import("@stakekit/api-hooks").StakeKitErrorDto>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    queryKey: import("@tanstack/query-core").QueryKey;
    data: PositionsData;
} | {
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: import("@stakekit/api-hooks").StakeKitErrorDto | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<PositionsData, import("@stakekit/api-hooks").StakeKitErrorDto>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    queryKey: import("@tanstack/query-core").QueryKey;
    data: PositionsData;
} | {
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: import("@stakekit/api-hooks").StakeKitErrorDto | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<PositionsData, import("@stakekit/api-hooks").StakeKitErrorDto>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    queryKey: import("@tanstack/query-core").QueryKey;
    data: PositionsData;
};
