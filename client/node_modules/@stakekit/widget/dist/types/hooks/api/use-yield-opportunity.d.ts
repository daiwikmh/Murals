import type { YieldDto } from "@stakekit/api-hooks";
import { useYieldYieldOpportunityHook } from "@stakekit/api-hooks";
import type { QueryClient } from "@tanstack/react-query";
import { EitherAsync } from "purify-ts";
type Params = {
    yieldId: string;
    isLedgerLive: boolean;
    signal?: AbortSignal;
};
export declare const useYieldOpportunity: (integrationId: string | undefined) => import("@tanstack/react-query").UseQueryResult<YieldDto, Error>;
export declare const getYieldOpportunity: (params: Params & {
    queryClient: QueryClient;
    yieldYieldOpportunity: ReturnType<typeof useYieldYieldOpportunityHook>;
}) => EitherAsync<Error, YieldDto>;
export declare const setYieldOpportunityInCache: ({ yieldDto, isLedgerLive, queryClient, }: {
    yieldDto: YieldDto;
    isLedgerLive: boolean;
    queryClient: QueryClient;
}) => void;
export {};
