export declare const useActivityActions: () => {
    data: import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: import("@tanstack/query-core").FetchNextPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchPreviousPage: (options?: import("@tanstack/query-core").FetchPreviousPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchNextPageError: boolean;
    isFetchingNextPage: boolean;
    isFetchPreviousPageError: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    allItems: {
        actionData: import("@stakekit/api-hooks").ActionDto;
        yieldData: import("@stakekit/api-hooks").YieldDto;
    }[] | undefined;
} | {
    data: import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>;
    error: null;
    isError: false;
    isPending: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: true;
    status: "success";
    fetchNextPage: (options?: import("@tanstack/query-core").FetchNextPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchPreviousPage: (options?: import("@tanstack/query-core").FetchPreviousPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    allItems: {
        actionData: import("@stakekit/api-hooks").ActionDto;
        yieldData: import("@stakekit/api-hooks").YieldDto;
    }[] | undefined;
} | {
    data: undefined;
    error: Error;
    isError: true;
    isPending: false;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "error";
    fetchNextPage: (options?: import("@tanstack/query-core").FetchNextPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchPreviousPage: (options?: import("@tanstack/query-core").FetchPreviousPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    allItems: {
        actionData: import("@stakekit/api-hooks").ActionDto;
        yieldData: import("@stakekit/api-hooks").YieldDto;
    }[] | undefined;
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "pending";
    fetchNextPage: (options?: import("@tanstack/query-core").FetchNextPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchPreviousPage: (options?: import("@tanstack/query-core").FetchPreviousPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    allItems: {
        actionData: import("@stakekit/api-hooks").ActionDto;
        yieldData: import("@stakekit/api-hooks").YieldDto;
    }[] | undefined;
} | {
    data: undefined;
    error: null;
    isError: false;
    isPending: true;
    isLoadingError: false;
    isRefetchError: false;
    isFetchNextPageError: false;
    isFetchPreviousPageError: false;
    isSuccess: false;
    status: "pending";
    fetchNextPage: (options?: import("@tanstack/query-core").FetchNextPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchPreviousPage: (options?: import("@tanstack/query-core").FetchPreviousPageOptions) => Promise<import("@tanstack/query-core").InfiniteQueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    isFetchingNextPage: boolean;
    isFetchingPreviousPage: boolean;
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isLoading: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/query-core").RefetchOptions) => Promise<import("@tanstack/query-core").QueryObserverResult<import("@tanstack/query-core").InfiniteData<{
        data: {
            actionData: import("@stakekit/api-hooks").ActionDto;
            yieldData: import("@stakekit/api-hooks").YieldDto;
        }[];
        hasNextPage: boolean;
        limit: number;
        page: number;
    }, unknown>, Error>>;
    fetchStatus: import("@tanstack/query-core").FetchStatus;
    allItems: {
        actionData: import("@stakekit/api-hooks").ActionDto;
        yieldData: import("@stakekit/api-hooks").YieldDto;
    }[] | undefined;
};
