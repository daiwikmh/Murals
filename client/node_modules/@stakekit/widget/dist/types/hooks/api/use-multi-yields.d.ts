import type { YieldDto } from "@stakekit/api-hooks";
import { useYieldYieldOpportunityHook } from "@stakekit/api-hooks";
import type { QueryClient, UseQueryOptions } from "@tanstack/react-query";
import { EitherAsync } from "purify-ts";
import type { SKWallet } from "../../domain/types";
export declare const getCachedMultiYields: ({ queryClient, yieldIds, }: {
    queryClient: QueryClient;
    yieldIds: string[];
}) => import("purify-ts/Maybe").Maybe<YieldDto[]>;
export declare const useMultiYields: <SelectData = YieldDto[]>(yieldIds: string[], opts?: {
    select?: UseQueryOptions<YieldDto[], Error, SelectData>["select"];
}) => import("@tanstack/react-query").UseQueryResult<SelectData, Error>;
export declare const getMultipleYields: (params: Parameters<typeof queryFn>[0] & {
    queryClient: QueryClient;
}) => EitherAsync<Error, YieldDto[]>;
declare const queryFn: ({ yieldIds, isLedgerLive, queryClient, isConnected, network, yieldYieldOpportunity, }: {
    isLedgerLive: boolean;
    yieldIds: string[];
    queryClient: QueryClient;
    isConnected: boolean;
    network: SKWallet["network"];
    yieldYieldOpportunity: ReturnType<typeof useYieldYieldOpportunityHook>;
}) => EitherAsync<Error, YieldDto[]>;
export {};
