import { type SettingsContextType } from "@sk-widget/providers/settings";
import { useYieldYieldOpportunityHook } from "@stakekit/api-hooks";
import type { QueryClient } from "@tanstack/react-query";
import { EitherAsync } from "purify-ts";
import type { InitParams } from "../domain/types/init-params";
export declare const useInitParams: <T = InitParams>(opts?: {
    select: (val: InitParams) => T;
}) => import("@tanstack/react-query").UseQueryResult<T, Error>;
export declare const getInitParams: (params: Parameters<typeof fn>[0] & {
    queryClient: QueryClient;
}) => EitherAsync<Error, InitParams>;
declare const fn: ({ isLedgerLive, queryClient, yieldYieldOpportunity, externalProviders, }: {
    isLedgerLive: boolean;
    queryClient: QueryClient;
    yieldYieldOpportunity: ReturnType<typeof useYieldYieldOpportunityHook>;
    externalProviders: SettingsContextType["externalProviders"];
}) => EitherAsync<Error, InitParams>;
export {};
