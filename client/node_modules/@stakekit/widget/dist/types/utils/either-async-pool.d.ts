import { EitherAsync } from "purify-ts";
import type { GetEitherAsyncRight } from "../types";
type TupleRightVals<T extends readonly (() => EitherAsync<Error, unknown>)[]> = {
    [Key in keyof T]: GetEitherAsyncRight<ReturnType<T[Key]>>;
};
export declare const eitherAsyncPool: <T extends readonly (() => EitherAsync<Error, unknown>)[] | []>(fns: T, n: number) => () => EitherAsync<Error, Awaited<TupleRightVals<T>>>;
export {};
