import type { Networks } from "@stakekit/common";
import BigNumber from "bignumber.js";
import type { i18n } from "i18next";
export declare const formatNumber: (number: string | BigNumber, decimals?: number) => string;
export declare const defaultFormattedNumber: (number: string | BigNumber) => string;
export declare const APToPercentage: (ap: number) => string;
export declare const getBackgroundColor: (stringInput: string) => string;
export declare const isIframe: () => boolean;
export declare const isLedgerDappBrowserProvider: () => boolean;
export declare const getNetworkLogo: (network: Networks) => string;
export declare const getTokenLogo: (tokenName: string) => string;
export declare const waitForMs: (ms: number) => Promise<unknown>;
export declare const typeSafeObjectFromEntries: <const T extends ReadonlyArray<readonly [PropertyKey, unknown]>>(entries: T) => { [K in T[number] as K[0]]: K[1]; };
export declare const typeSafeObjectEntries: <T extends Record<PropertyKey, unknown>>(obj: T) => { [K in keyof T]: [K, T[K]]; }[keyof T][];
export declare function formatAddress(address: string, opts?: {
    leadingChars: number;
    trailingChars: number;
}): string;
export declare const isMobile: () => boolean;
export declare const bpsToAmount: (bps: BigNumber, amount: BigNumber) => BigNumber;
export declare const bpsToPercentage: (bps: BigNumber | number) => number;
export declare const groupDateStrings: (dateStrings: string[], i18n: i18n) => [string[], number[]];
