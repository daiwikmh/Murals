{"version":3,"file":"index-Chfa4EHr.js","sources":["../../../../node_modules/@ledgerhq/logs/lib-es/index.js"],"sourcesContent":["let id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type, message, data) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */\nexport const trace = ({ type, message, data, context, }) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    if (context)\n        obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */\nexport class LocalTracer {\n    constructor(type, context) {\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context,\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb) => {\n    subscribers.push(cb);\n    return () => {\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (let i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map"],"names":["id","subscribers","log","type","message","data","obj","dispatch","trace","context","LocalTracer","contextToAdd","listen","cb","i"],"mappings":"AAAA,IAAIA,IAAK;AACT,MAAMC,IAAc,CAAA,GAOPC,IAAM,CAACC,GAAMC,GAASC,MAAS;AACxC,QAAMC,IAAM;AAAA,IACR,MAAAH;AAAA,IACA,IAAI,OAAO,EAAEH,CAAE;AAAA,IACf,MAAM,oBAAI,KAAM;AAAA,EACxB;AACI,EAAII,MACAE,EAAI,UAAUF,IAGlBG,EAASD,CAAG;AAChB,GASaE,IAAQ,CAAC,EAAE,MAAAL,GAAM,SAAAC,GAAS,MAAAC,GAAM,SAAAI,EAAO,MAAQ;AACxD,QAAMH,IAAM;AAAA,IACR,MAAAH;AAAA,IACA,IAAI,OAAO,EAAEH,CAAE;AAAA,IACf,MAAM,oBAAI,KAAM;AAAA,EACxB;AACI,EAAII,MACAE,EAAI,UAAUF,IACdC,MACAC,EAAI,OAAOD,IACXI,MACAH,EAAI,UAAUG,IAClBF,EAASD,CAAG;AAChB;AAUO,MAAMI,EAAY;AAAA,EACrB,YAAYP,GAAMM,GAAS;AACvB,SAAK,OAAON,GACZ,KAAK,UAAUM;AAAA,EAClB;AAAA,EACD,MAAML,GAASC,GAAM;AACjB,IAAAG,EAAM;AAAA,MACF,MAAM,KAAK;AAAA,MACX,SAAAJ;AAAA,MACA,MAAAC;AAAA,MACA,SAAS,KAAK;AAAA,IAC1B,CAAS;AAAA,EACJ;AAAA,EACD,aAAa;AACT,WAAO,KAAK;AAAA,EACf;AAAA,EACD,WAAWI,GAAS;AAChB,SAAK,UAAUA;AAAA,EAClB;AAAA,EACD,cAAcE,GAAc;AACxB,SAAK,UAAU,OAAO,OAAO,OAAO,OAAO,CAAA,GAAI,KAAK,OAAO,GAAGA,CAAY;AAAA,EAC7E;AAAA,EACD,UAAU;AACN,WAAO,KAAK;AAAA,EACf;AAAA,EACD,QAAQR,GAAM;AACV,SAAK,OAAOA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,SAASA,GAAM;AACX,WAAO,IAAIO,EAAYP,GAAM,KAAK,OAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,YAAYM,GAAS;AACjB,WAAO,IAAIC,EAAY,KAAK,MAAMD,CAAO;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQD,mBAAmBE,GAAc;AAC7B,WAAO,IAAID,EAAY,KAAK,MAAM,OAAO,OAAO,OAAO,OAAO,CAAE,GAAE,KAAK,OAAO,GAAGC,CAAY,CAAC;AAAA,EACjG;AACL;AAOO,MAAMC,IAAS,CAACC,OACnBZ,EAAY,KAAKY,CAAE,GACZ,MAAM;AACT,QAAMC,IAAIb,EAAY,QAAQY,CAAE;AAChC,EAAIC,MAAM,OAENb,EAAYa,CAAC,IAAIb,EAAYA,EAAY,SAAS,CAAC,GACnDA,EAAY,IAAG;AAE3B;AAEA,SAASM,EAASL,GAAK;AACnB,WAASY,IAAI,GAAGA,IAAIb,EAAY,QAAQa;AACpC,QAAI;AACA,MAAAb,EAAYa,CAAC,EAAEZ,CAAG;AAAA,IACrB,QACS;AAAA,IAET;AAET;AACI,OAAO,SAAW,QAClB,OAAO,qBAAqBU;","x_google_ignoreList":[0]}