var n = Object.defineProperty;
var i = (r, t, e) => t in r ? n(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;
var s = (r, t, e) => i(r, typeof t != "symbol" ? t + "" : t, e);
class l {
  constructor(t, e) {
    s(this, "client");
    s(this, "registry");
    this.client = t, this.registry = e;
  }
  async resolveName(t) {
    try {
      const { contract: e, getQueryMsg: c } = this.registry;
      return await this.client.queryContractSmart(e, c(t));
    } catch {
      return;
    }
  }
}
export {
  l as NameService
};
//# sourceMappingURL=name-service-J9lqXvM6.js.map
